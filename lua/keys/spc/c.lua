local lsp = { name = "+lsp",
  i = { ":LspInfo<CR>", "info" },
  I = { ":LspInstall<space><C-i>", "install" },
  f = { ":LspInstallInfo<CR>", "install" },
  U = { ":LspUninstall<space><C-i>", "uninstall" },
  s = { ":LspStart<CR>", "start" },
  S = { ":LspStop<CR>", "stop" },
  r = { ":LspRestart<CR>", "restart" },
  ["<BS>"]    = { "<CMD>LspStop<CR>", "stop"},
  ["<CR>"]    = { "<CMD>LspRestart<CR>", "restart"},
  ["<TAB>"]   = { "<CMD>LspInfo<CR>", "info"},
  ["/"]       = { "<CMD>LspInfo<CR>", "info"},
  ["?"]       = { "<CMD>LspInstallInfo<CR>", "install info"},
  ["<space>"] = { "<ESC>:LspSettings<space>", "settings"},
}
lvim.builtin.which_key.mappings.c = {
  name = "+code",
  a = { "<CMD>CodeActionMenu<CR>", "code actions" },
  A = { '<cmd>lua vim.lsp.buf.code_action()<CR>', "actions" },
  p = { "<CMD>Telescope projects<CR>", "fd proj"},
  m = { '<ESC>:CodeActionMenu<CR>', 'codeaction' },
  D = { '<cmd>lua vim.lsp.buf.declaration()<CR>', "declarations" },
  h = { '<cmd>lua vim.lsp.buf.hover()<CR>', "hover" },
  s = { '<cmd>lua vim.lsp.buf.signature_help()<CR>', "signature" },
  r = { '<cmd>lua vim.lsp.buf.references()<CR>', 'references' },
  f = { '<cmd>lua vim.lsp.buf.definition()<CR>', 'definition' },
  i = { '<cmd>lua vim.lsp.buf.implementation()<CR>', 'implementations' },
  t = { '<cmd>lua vim.lsp.buf.type_definition()<CR>', 'type definition' },
  T = { '<ESC>:AerialTreeToggle<CR>', "aerial" },
  R = { '<cmd>lua vim.lsp.buf.rename()<CR>', 'rename' },
  d = { '<cmd>lua vim.diagnostic.open_float()<CR>', 'diagnostics' },
  F = { '<cmd>lua vim.lsp.buf.formatting()<CR>', 'formatting' },
  I = { ":IronRepl<CR>", "REPL" },
  x = { ":CodeActionMenu<CR>", "actions (alt)" },
  l = lsp,
  L = lsp,
}
